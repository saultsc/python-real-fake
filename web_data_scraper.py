#!/usr/bin/env python3
"""
Scraper de datos web para obtener verdades irrefutables
Usa m√∫ltiples APIs y fuentes web gratuitas
"""

import requests
import csv
import time
from typing import List, Dict, Tuple
import random
import json


class WebDataScraper:
    def __init__(self):
        self.dataset = []
        self.api_keys = {
            "nasa": "DEMO_KEY",  # Gratis para uso b√°sico
            "openweather": None,  # Requiere registro
            "wikidata": None,  # No requiere API key
            "dbpedia": None,  # No requiere API key
        }

    def get_wikidata_countries(self):
        """Obtiene pa√≠ses y capitales de Wikidata"""
        print("üåç Obteniendo datos de Wikidata...")

        try:
            # Consulta SPARQL m√°s simple y efectiva
            query = """
            SELECT ?country ?capital WHERE {
              ?country wdt:P31 wd:Q3624078 .
              ?country wdt:P36 ?capital .
              ?country wdt:P1448 ?name .
              ?capital wdt:P1448 ?capitalName .
            }
            LIMIT 200
            """

            url = "https://query.wikidata.org/sparql"
            response = requests.get(url, params={"query": query, "format": "json"})

            if response.status_code == 200:
                data = response.json()
                facts_added = 0

                for result in data["results"]["bindings"]:
                    try:
                        country = result["name"]["value"]
                        capital = result["capitalName"]["value"]

                        # Filtrar nombres v√°lidos
                        if (
                            len(country) < 50
                            and len(capital) < 50
                            and not country.isdigit()
                            and not capital.isdigit()
                        ):

                            # Agregar hecho verdadero
                            self.dataset.append(
                                {
                                    "statement": f"{capital} es la capital de {country}",
                                    "truth_value": "verdadero",
                                    "category": "geografia",
                                    "source": "wikidata",
                                }
                            )

                            # Agregar falsedad
                            self.dataset.append(
                                {
                                    "statement": f"{capital} no es la capital de {country}",
                                    "truth_value": "falso",
                                    "category": "geografia",
                                    "source": "wikidata",
                                }
                            )

                            facts_added += 2

                    except Exception as e:
                        continue

                print(f"‚úÖ Agregados {facts_added} hechos de Wikidata")
                return facts_added

        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo datos de Wikidata: {e}")
            return 0

    def get_wikidata_elements(self):
        """Obtiene elementos qu√≠micos de Wikidata"""
        print("üî¨ Obteniendo elementos qu√≠micos de Wikidata...")

        try:
            query = """
            SELECT ?element ?symbol ?number WHERE {
              ?element wdt:P31 wd:Q11344 .
              ?element wdt:P246 ?symbol .
              ?element wdt:P1086 ?number .
              ?element wdt:P1448 ?name .
              FILTER(?number <= 50)
            }
            ORDER BY ?number
            LIMIT 50
            """

            url = "https://query.wikidata.org/sparql"
            response = requests.get(url, params={"query": query, "format": "json"})

            if response.status_code == 200:
                data = response.json()
                facts_added = 0

                for result in data["results"]["bindings"]:
                    try:
                        element = result["name"]["value"]
                        symbol = result["symbol"]["value"]
                        number = result["number"]["value"]

                        if len(element) < 30:
                            # Agregar hecho verdadero
                            self.dataset.append(
                                {
                                    "statement": f"El {element} tiene s√≠mbolo qu√≠mico {symbol}",
                                    "truth_value": "verdadero",
                                    "category": "quimica",
                                    "source": "wikidata",
                                }
                            )

                            self.dataset.append(
                                {
                                    "statement": f"El {element} tiene n√∫mero at√≥mico {number}",
                                    "truth_value": "verdadero",
                                    "category": "quimica",
                                    "source": "wikidata",
                                }
                            )

                            # Agregar falsedades
                            self.dataset.append(
                                {
                                    "statement": f"El {element} no tiene s√≠mbolo qu√≠mico {symbol}",
                                    "truth_value": "falso",
                                    "category": "quimica",
                                    "source": "wikidata",
                                }
                            )

                            facts_added += 3

                    except Exception as e:
                        continue

                print(f"‚úÖ Agregados {facts_added} hechos qu√≠micos de Wikidata")
                return facts_added

        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo elementos qu√≠micos: {e}")
            return 0

    def get_nasa_asteroids(self):
        """Obtiene datos de asteroides de la NASA"""
        print("üöÄ Obteniendo datos de asteroides de la NASA...")

        try:
            api_key = self.api_keys["nasa"]
            url = f"https://api.nasa.gov/neo/rest/v1/feed?api_key={api_key}&start_date=2024-01-01&end_date=2024-01-07"

            response = requests.get(url)

            if response.status_code == 200:
                data = response.json()
                facts_added = 0

                for date, asteroids in data["near_earth_objects"].items():
                    for asteroid in asteroids[:20]:  # Aumentar a 20 por fecha
                        try:
                            name = asteroid["name"]
                            diameter = asteroid["estimated_diameter"]["kilometers"][
                                "estimated_diameter_max"
                            ]
                            distance = asteroid["close_approach_data"][0][
                                "miss_distance"
                            ]["kilometers"]

                            # Agregar hechos verdaderos
                            self.dataset.append(
                                {
                                    "statement": f"El asteroide {name} tiene un di√°metro aproximado de {diameter:.2f} km",
                                    "truth_value": "verdadero",
                                    "category": "astronomia",
                                    "source": "nasa",
                                }
                            )

                            self.dataset.append(
                                {
                                    "statement": f"El asteroide {name} pas√≥ a {distance:.0f} km de la Tierra",
                                    "truth_value": "verdadero",
                                    "category": "astronomia",
                                    "source": "nasa",
                                }
                            )

                            facts_added += 2

                        except Exception as e:
                            continue

                print(f"‚úÖ Agregados {facts_added} hechos astron√≥micos de la NASA")
                return facts_added

        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo datos de la NASA: {e}")
            return 0

    def get_basic_facts(self):
        """Genera hechos b√°sicos pero √∫tiles localmente"""
        print("üìö Generando hechos b√°sicos...")

        basic_facts = [
            # Matem√°ticas b√°sicas
            ("2 + 2 = 4", "matematicas"),
            ("5 √ó 5 = 25", "matematicas"),
            ("10 √∑ 2 = 5", "matematicas"),
            ("3¬≤ = 9", "matematicas"),
            ("‚àö16 = 4", "matematicas"),
            ("7 √ó 8 = 56", "matematicas"),
            ("15 √∑ 3 = 5", "matematicas"),
            ("4¬≥ = 64", "matematicas"),
            ("‚àö25 = 5", "matematicas"),
            ("12 √ó 12 = 144", "matematicas"),
            # Ciencias b√°sicas
            ("El agua hierve a 100¬∞C", "ciencia"),
            ("El agua se congela a 0¬∞C", "ciencia"),
            ("La Tierra gira alrededor del Sol", "ciencia"),
            ("Los humanos tienen 206 huesos", "ciencia"),
            ("El coraz√≥n humano late 60-100 veces por minuto", "ciencia"),
            ("La velocidad de la luz es 300,000 km/s", "ciencia"),
            ("El ADN es la mol√©cula de la herencia", "ciencia"),
            ("Las plantas realizan fotos√≠ntesis", "ciencia"),
            ("El ox√≠geno es necesario para la respiraci√≥n", "ciencia"),
            ("La gravedad atrae los objetos hacia la Tierra", "ciencia"),
            # Geograf√≠a b√°sica
            ("Madrid es la capital de Espa√±a", "geografia"),
            ("Par√≠s es la capital de Francia", "geografia"),
            ("Londres es la capital de Reino Unido", "geografia"),
            ("Roma es la capital de Italia", "geografia"),
            ("Berl√≠n es la capital de Alemania", "geografia"),
            ("Tokio es la capital de Jap√≥n", "geografia"),
            ("Mosc√∫ es la capital de Rusia", "geografia"),
            ("Pek√≠n es la capital de China", "geografia"),
            ("Nueva Delhi es la capital de India", "geografia"),
            ("Brasilia es la capital de Brasil", "geografia"),
            # Historia b√°sica
            ("Col√≥n descubri√≥ Am√©rica en 1492", "historia"),
            ("La Segunda Guerra Mundial termin√≥ en 1945", "historia"),
            ("La Revoluci√≥n Francesa comenz√≥ en 1789", "historia"),
            ("La independencia de EE.UU. fue en 1776", "historia"),
            ("La ca√≠da del Muro de Berl√≠n fue en 1989", "historia"),
            ("Napole√≥n fue emperador de Francia", "historia"),
            ("La Primera Guerra Mundial fue de 1914-1918", "historia"),
            ("La Revoluci√≥n Industrial comenz√≥ en el siglo XVIII", "historia"),
            ("La Edad Media dur√≥ del siglo V al XV", "historia"),
            ("La Antigua Roma existi√≥ antes de Cristo", "historia"),
            # Tecnolog√≠a b√°sica
            ("Un byte tiene 8 bits", "tecnologia"),
            ("HTML significa HyperText Markup Language", "tecnologia"),
            ("HTTP significa HyperText Transfer Protocol", "tecnologia"),
            ("Un kilobyte tiene 1024 bytes", "tecnologia"),
            ("Un megabyte tiene 1024 kilobytes", "tecnologia"),
            ("Python es un lenguaje de programaci√≥n", "tecnologia"),
            ("JavaScript se ejecuta en el navegador", "tecnologia"),
            ("Linux es un sistema operativo de c√≥digo abierto", "tecnologia"),
            ("WiFi permite conexi√≥n inal√°mbrica a internet", "tecnologia"),
            ("Bluetooth es una tecnolog√≠a de comunicaci√≥n inal√°mbrica", "tecnologia"),
        ]

        facts_added = 0

        for fact, category in basic_facts:
            # Agregar hecho verdadero
            self.dataset.append(
                {
                    "statement": fact,
                    "truth_value": "verdadero",
                    "category": category,
                    "source": "basico",
                }
            )

            # Crear falsedad
            if "=" in fact:
                # Para matem√°ticas, cambiar el resultado
                parts = fact.split("=")
                if len(parts) == 2:
                    false_fact = f"{parts[0]}= {int(parts[1].strip()) + 1}"
                    self.dataset.append(
                        {
                            "statement": false_fact,
                            "truth_value": "falso",
                            "category": category,
                            "source": "basico",
                        }
                    )
            else:
                # Para otros hechos, negar la afirmaci√≥n
                false_fact = (
                    fact.replace("es", "no es")
                    .replace("tiene", "no tiene")
                    .replace("fue", "no fue")
                )
                self.dataset.append(
                    {
                        "statement": false_fact,
                        "truth_value": "falso",
                        "category": category,
                        "source": "basico",
                    }
                )

            facts_added += 2

        print(f"‚úÖ Agregados {facts_added} hechos b√°sicos")
        return facts_added

    def get_geonames_data(self):
        """Obtiene datos geogr√°ficos de GeoNames (gratis)"""
        print("üó∫Ô∏è Obteniendo datos de GeoNames...")

        try:
            # GeoNames permite consultas gratuitas sin API key
            # L√≠mite: 20,000 consultas por d√≠a

            # Obtener ciudades principales
            url = "http://api.geonames.org/searchJSON"
            params = {
                "q": "city",
                "maxRows": 200,
                "startRow": 0,
                "username": "demo",  # Usuario demo para pruebas
            }

            response = requests.get(url, params=params)

            if response.status_code == 200:
                data = response.json()
                facts_added = 0

                for city in data.get("geonames", []):
                    try:
                        city_name = city["name"]
                        country = city["countryName"]
                        population = city.get("population", 0)

                        if population > 100000:  # Solo ciudades grandes
                            # Agregar hecho verdadero
                            self.dataset.append(
                                {
                                    "statement": f"{city_name} es una ciudad de {country}",
                                    "truth_value": "verdadero",
                                    "category": "geografia",
                                    "source": "geonames",
                                }
                            )

                            self.dataset.append(
                                {
                                    "statement": f"{city_name} tiene una poblaci√≥n de {population:,} habitantes",
                                    "truth_value": "verdadero",
                                    "category": "geografia",
                                    "source": "geonames",
                                }
                            )

                            facts_added += 2

                    except Exception as e:
                        continue

                print(f"‚úÖ Agregados {facts_added} hechos geogr√°ficos de GeoNames")
                return facts_added

        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo datos de GeoNames: {e}")
            return 0

    def get_restcountries_data(self):
        """Obtiene datos de pa√≠ses de REST Countries API (gratis)"""
        print("üè≥Ô∏è Obteniendo datos de pa√≠ses...")

        try:
            url = "https://restcountries.com/v3.1/all"
            response = requests.get(url)

            if response.status_code == 200:
                countries = response.json()
                facts_added = 0

                for country in countries[:150]:  # Aumentar a 150 pa√≠ses
                    try:
                        name = country["name"]["common"]
                        capital = country.get("capital", ["N/A"])[0]
                        population = country.get("population", 0)
                        region = country.get("region", "N/A")
                        area = country.get("area", 0)

                        if capital != "N/A" and population > 0 and region != "N/A":
                            # Agregar hechos verdaderos
                            self.dataset.append(
                                {
                                    "statement": f"{capital} es la capital de {name}",
                                    "truth_value": "verdadero",
                                    "category": "geografia",
                                    "source": "restcountries",
                                }
                            )

                            self.dataset.append(
                                {
                                    "statement": f"{name} est√° en la regi√≥n de {region}",
                                    "truth_value": "verdadero",
                                    "category": "geografia",
                                    "source": "restcountries",
                                }
                            )

                            self.dataset.append(
                                {
                                    "statement": f"{name} tiene una poblaci√≥n de {population:,} habitantes",
                                    "truth_value": "verdadero",
                                    "category": "geografia",
                                    "source": "restcountries",
                                }
                            )

                            if area > 0:
                                self.dataset.append(
                                    {
                                        "statement": f"{name} tiene un √°rea de {area:,.0f} km¬≤",
                                        "truth_value": "verdadero",
                                        "category": "geografia",
                                        "source": "restcountries",
                                    }
                                )

                            # Agregar falsedades
                            self.dataset.append(
                                {
                                    "statement": f"{capital} no es la capital de {name}",
                                    "truth_value": "falso",
                                    "category": "geografia",
                                    "source": "restcountries",
                                }
                            )

                            facts_added += 5 if area > 0 else 4

                    except Exception as e:
                        continue

                print(f"‚úÖ Agregados {facts_added} hechos de pa√≠ses de REST Countries")
                return facts_added

        except Exception as e:
            print(f"‚ö†Ô∏è Error obteniendo datos de pa√≠ses: {e}")
            return 0

    def get_additional_science_facts(self):
        """Genera hechos cient√≠ficos adicionales"""
        print("üî¨ Generando hechos cient√≠ficos adicionales...")

        science_facts = [
            ("La temperatura corporal normal es 37¬∞C", "ciencia"),
            ("El pH del agua pura es 7", "ciencia"),
            ("La velocidad del sonido es 343 m/s", "ciencia"),
            ("La masa de la Tierra es 5.97 √ó 10¬≤‚Å¥ kg", "ciencia"),
            ("La distancia Tierra-Luna es 384,400 km", "ciencia"),
            ("La velocidad de la luz es 299,792,458 m/s", "ciencia"),
            ("El n√∫mero de Avogadro es 6.022 √ó 10¬≤¬≥", "ciencia"),
            ("La constante de Planck es 6.626 √ó 10‚Åª¬≥‚Å¥ J¬∑s", "ciencia"),
            ("La gravedad en la Tierra es 9.81 m/s¬≤", "ciencia"),
            ("La presi√≥n atmosf√©rica es 101,325 Pa", "ciencia"),
            ("El punto de ebullici√≥n del nitr√≥geno es -196¬∞C", "ciencia"),
            ("El punto de fusi√≥n del hierro es 1,538¬∞C", "ciencia"),
            ("La densidad del agua es 1 g/cm¬≥", "ciencia"),
            ("El radio de la Tierra es 6,371 km", "ciencia"),
            ("La edad del universo es 13.8 mil millones de a√±os", "ciencia"),
        ]

        facts_added = 0

        for fact, category in science_facts:
            # Agregar hecho verdadero
            self.dataset.append(
                {
                    "statement": fact,
                    "truth_value": "verdadero",
                    "category": category,
                    "source": "ciencia_adicional",
                }
            )

            # Crear falsedad
            if "es" in fact:
                false_fact = fact.replace("es", "no es")
            elif "tiene" in fact:
                false_fact = fact.replace("tiene", "no tiene")
            else:
                false_fact = f"No es cierto que {fact.lower()}"

            self.dataset.append(
                {
                    "statement": false_fact,
                    "truth_value": "falso",
                    "category": category,
                    "source": "ciencia_adicional",
                }
            )

            facts_added += 2

        print(f"‚úÖ Agregados {facts_added} hechos cient√≠ficos adicionales")
        return facts_added

    def get_math_facts(self):
        """Genera hechos matem√°ticos adicionales"""
        print("üßÆ Generando hechos matem√°ticos adicionales...")

        math_facts = [
            ("œÄ (pi) es aproximadamente 3.14159", "matematicas"),
            ("e (n√∫mero de Euler) es aproximadamente 2.71828", "matematicas"),
            ("œÜ (n√∫mero √°ureo) es aproximadamente 1.61803", "matematicas"),
            ("‚àö2 es aproximadamente 1.41421", "matematicas"),
            ("‚àö3 es aproximadamente 1.73205", "matematicas"),
            ("La suma de los √°ngulos de un tri√°ngulo es 180¬∞", "matematicas"),
            ("La suma de los √°ngulos de un cuadril√°tero es 360¬∞", "matematicas"),
            ("Un c√≠rculo tiene 360 grados", "matematicas"),
            ("Un tri√°ngulo equil√°tero tiene 3 lados iguales", "matematicas"),
            ("Un cuadrado tiene 4 lados iguales", "matematicas"),
            ("Un pent√°gono tiene 5 lados", "matematicas"),
            ("Un hex√°gono tiene 6 lados", "matematicas"),
            ("La f√≥rmula del √°rea de un c√≠rculo es œÄr¬≤", "matematicas"),
            ("La f√≥rmula del √°rea de un tri√°ngulo es (b√óh)/2", "matematicas"),
            ("La f√≥rmula del √°rea de un cuadrado es l¬≤", "matematicas"),
        ]

        facts_added = 0

        for fact, category in math_facts:
            # Agregar hecho verdadero
            self.dataset.append(
                {
                    "statement": fact,
                    "truth_value": "verdadero",
                    "category": category,
                    "source": "matematicas_adicional",
                }
            )

            # Crear falsedad
            if "es" in fact:
                false_fact = fact.replace("es", "no es")
            elif "tiene" in fact:
                false_fact = fact.replace("tiene", "no tiene")
            else:
                false_fact = f"No es cierto que {fact.lower()}"

            self.dataset.append(
                {
                    "statement": false_fact,
                    "truth_value": "falso",
                    "category": category,
                    "source": "matematicas_adicional",
                }
            )

            facts_added += 2

        print(f"‚úÖ Agregados {facts_added} hechos matem√°ticos adicionales")
        return facts_added

    def get_technology_facts(self):
        """Genera hechos tecnol√≥gicos adicionales"""
        print("üíª Generando hechos tecnol√≥gicos adicionales...")

        tech_facts = [
            ("TCP/IP es el protocolo de internet", "tecnologia"),
            ("DNS convierte nombres en direcciones IP", "tecnologia"),
            ("HTTP es un protocolo de transferencia", "tecnologia"),
            ("HTTPS es HTTP con cifrado SSL/TLS", "tecnologia"),
            ("FTP es un protocolo de transferencia de archivos", "tecnologia"),
            ("SSH permite conexiones seguras remotas", "tecnologia"),
            ("JSON es un formato de intercambio de datos", "tecnologia"),
            ("XML es un lenguaje de marcado extensible", "tecnologia"),
            ("SQL es un lenguaje de consulta de bases de datos", "tecnologia"),
            ("Git es un sistema de control de versiones", "tecnologia"),
            ("Docker permite contenerizaci√≥n de aplicaciones", "tecnologia"),
            ("Kubernetes orquesta contenedores", "tecnologia"),
            ("REST es un estilo de arquitectura web", "tecnologia"),
            ("GraphQL es un lenguaje de consulta para APIs", "tecnologia"),
            ("Microservicios dividen aplicaciones en servicios", "tecnologia"),
        ]

        facts_added = 0

        for fact, category in tech_facts:
            # Agregar hecho verdadero
            self.dataset.append(
                {
                    "statement": fact,
                    "truth_value": "verdadero",
                    "category": category,
                    "source": "tecnologia_adicional",
                }
            )

            # Crear falsedad
            if "es" in fact:
                false_fact = fact.replace("es", "no es")
            elif "permite" in fact:
                false_fact = fact.replace("permite", "no permite")
            else:
                false_fact = f"No es cierto que {fact.lower()}"

            self.dataset.append(
                {
                    "statement": false_fact,
                    "truth_value": "falso",
                    "category": category,
                    "source": "tecnologia_adicional",
                }
            )

            facts_added += 2

        print(f"‚úÖ Agregados {facts_added} hechos tecnol√≥gicos adicionales")
        return facts_added

    def save_to_csv(self, filename="web_scraped_dataset.csv"):
        """Guarda el dataset en CSV"""
        # Mezclar el dataset
        random.shuffle(self.dataset)

        with open(filename, "w", newline="", encoding="utf-8") as csvfile:
            fieldnames = ["statement", "truth_value", "category", "source"]
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

            writer.writeheader()
            for row in self.dataset:
                writer.writerow(row)

        print(f"\nüíæ Dataset guardado en '{filename}'")
        print(f"üìä Total de afirmaciones: {len(self.dataset)}")

        # Estad√≠sticas por fuente
        sources = {}
        categories = {}
        truth_counts = {"verdadero": 0, "falso": 0}

        for row in self.dataset:
            source = row["source"]
            cat = row["category"]
            truth = row["truth_value"]

            if source not in sources:
                sources[source] = 0
            sources[source] += 1

            if cat not in categories:
                categories[cat] = 0
            categories[cat] += 1

            truth_counts[truth] += 1

        print(f"\nüìà Distribuci√≥n por fuente:")
        for source, count in sorted(sources.items()):
            print(f"   {source}: {count}")

        print(f"\nüìä Distribuci√≥n por categor√≠a:")
        for cat, count in sorted(categories.items()):
            print(f"   {cat}: {count}")

        print(f"\nüéØ Distribuci√≥n por veracidad:")
        print(f"   Verdaderas: {truth_counts['verdadero']}")
        print(f"   Falsas: {truth_counts['falso']}")

    def scrape_all_sources(self):
        """Obtiene datos de todas las fuentes web"""
        print("üöÄ Iniciando scraping de datos web...")
        print("=" * 60)

        # Obtener datos de todas las fuentes
        self.get_basic_facts()  # Hechos b√°sicos garantizados

        self.get_wikidata_countries()
        time.sleep(1)  # Pausa para no sobrecargar las APIs

        self.get_wikidata_elements()
        time.sleep(1)

        self.get_nasa_asteroids()
        time.sleep(1)

        self.get_geonames_data()
        time.sleep(1)

        self.get_restcountries_data()
        time.sleep(1)

        # Agregar hechos adicionales generados localmente
        self.get_additional_science_facts()
        self.get_math_facts()
        self.get_technology_facts()

        # Guardar en CSV
        print("\nüíæ Guardando dataset...")
        self.save_to_csv()

        print("\n" + "=" * 60)
        print("üéâ ¬°Scraping web completado!")
        print(f"üìä Total de afirmaciones obtenidas: {len(self.dataset)}")
        print(
            f"üåê Fuentes utilizadas: {len(set([row['source'] for row in self.dataset]))}"
        )


def main():
    """Funci√≥n principal"""
    scraper = WebDataScraper()
    scraper.scrape_all_sources()


if __name__ == "__main__":
    main()
